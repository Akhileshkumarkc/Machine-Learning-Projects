# comments:
#
#
#
#
#
###############################################################
# Item Similarity
#############################################################
par(mfrow = c(1, 3))
similarity_items <- similarity(MovieLense[, 1:4], method = "cosine", which = "items")
as.matrix(similarity_items)
image(as.matrix(similarity_items), main = "item similarity cosine",col=gray(100:200/200))
similarity_items <- similarity(MovieLense[, 1:4], method = "jaccard", which = "items")
as.matrix(similarity_items)
image(as.matrix(similarity_items), main = "item similarity jaccard",col=gray(100:200/200))
similarity_items <- similarity(MovieLense[, 1:4], method = "pearson", which = "items")
as.matrix(similarity_items)
image(as.matrix(similarity_items), main = "item similarity pearson",col=gray(100:200/200))
par(mfrow = c(1, 1))
recc_model <- Recommender(data = recc_data_train,method = "IBCF",parameter = list(method = "Jaccard"))
recommender_models <- recommenderRegistry$get_entries(dataType = "ALS_realRatingMatrix")
names(recommender_models)
lapply(recommender_models, "[[", "description")
## $IBCF_realRatingMatrix
## [1] "Recommender based on item-based collaborative filtering (real data)."
##
## $PCA_realRatingMatrix
## [1] "Recommender based on PCA approximation (real data)."
##
## $POPULAR_realRatingMatrix## [1] "Recommender based on item popularity (real data)."
##
## $RANDOM_realRatingMatrix
## [1] "Produce random recommendations (real ratings)."
##
## $SVD_realRatingMatrix
## [1] "Recommender based on SVD approximation (real data)."
##
## $UBCF_realRatingMatrix
## [1] "Recommender based on user-based collaborative filtering (real data)."
```{r}
recommender_models$IBCF_realRatingMatrix$parameters
library("recommenderlab")
library("ggplot2")
data(MovieLense)
class(MovieLense)
dim(MovieLense)
## [1] "realRatingMatrix"
## attr(,"package")
## [1] "recommenderlab"
#Load the MovieLense Dataset
which_train <- sample(x = c(TRUE, FALSE), size = nrow(ratings_movies), replace = TRUE, prob = c(0.8, 0.2))
head(which_train)
# divide it into train data and test data.
recc_data_train <- ratings_movies[which_train, ]
recc_data_test <- ratings_movies[!which_train, ]
# build the recommender
recommender_models <- recommenderRegistry$get_entries(dataType = "realRatingMatrix")
recommender_models$IBCF_realRatingMatrix$parameters
# method 1 Pearson.
# method 2 cosine similarity.
recc_model <- Recommender(data = recc_data_train , method = "IBCF", parameter = list(k = 30))
## Recommender of type 'IBCF' for 'realRatingMatrix' ## learned using 111 users.
class(recc_model)
## [1] "Recommender"
## attr(,"package")
## [1] "recommenderlab"
model_details <- getModel(recc_model)
model_details$description
model_details$k
class(model_details$sim)
dim(model_details$sim)
n_items_top <- 20
image(model_details$sim[1:n_items_top, 1:n_items_top], main = "Heatmap of the first rows and columns")
model_details$k
## [1] 30
row_sums <- rowSums(model_details$sim > 0)
table(row_sums)
## row_sums
##  30
## 332
col_sums <- colSums(model_details$sim > 0)
qplot(col_sums) + stat_bin(binwidth = 1) + ggtitle("Distribution of the column count")
which_max <- order(col_sums, decreasing = TRUE)[1:6]
rownames(model_details$sim)[which_max]
n_recommended <- 6
recc_predicted <- predict(object = recc_model, newdata = recc_data_test, n = n_recommended)
recc_predicted
class(recc_predicted)
slotNames(recc_predicted)
recc_predicted@items[[1]]
recc_matrix <- sapply(recc_predicted@items, function(x){
colnames(ratings_movies)[x]
})
dim(recc_matrix)
recc_matrix[, 1:4]
number_of_items_sorted <- sort(number_of_items, decreasing = TRUE)
number_of_items_top <- head(number_of_items_sorted, n = 4)
table_top <- data.frame(names(number_of_items_top), number_of_items_top)
table_top
```
singerdata <- read.csv("prediction.txt", header = T, sep = ",")
predictiondata <- read.csv("prediction.txt", header = T, sep = ",")
predictiondata <- read.csv("prediction.txt", header = T, sep = ",")
setwd("C:/Users/Akhilesh/Desktop/Ml project/Shruti/collaborative-filtering-netflix-master/collaborative-filtering-netflix-master")
predictiondata <- read.csv("prediction.txt", header = T, sep = ",")
setwd("C:/Users/Akhilesh/Desktop/Ml project/Shruti/collaborative-filtering-netflix-master/collaborative-filtering-netflix-master")
predictiondata <- read.csv("prediction.txt", header = T, sep = ",")
predictiondata <- read.csv("predictions.txt", header = T, sep = ",")
plot(predictiondata)
names <- c("movieid","userid","givenrating","predicted rating")
names
predictiondata.read(names)
names(predictiondata) <- c("movieid","userid","givenrating","predicted rating")
predictiondata
plot(predictiondata)
plot(predictiondata)
plot(predictiondata)
plot(predictiondata$givenrating,prediction$predictedrating)
plot(predictiondata$givenrating,predictiondata$predictedrating)
summary(predictiondata)
histogram(predictiondata)
hist(predictiondata)
hist(predictiondata$givenrating)
par(mfrow = c(1, 2))
hist(predictiondata$givenrating)
hist(predict$predictrating)
par(mfrow = c(1, 1))
par(mfrow = c(1, 2))
hist(predictiondata$givenrating)
hist(predict$predictedrating)
par(mfrow = c(1, 1))
par(mfrow = c(1, 2))
hist(predictiondata$givenrating)
hist(predictiondata$predictedrating)
par(mfrow = c(1, 1))
par(mfrow = c(1, 2))
hist(predictiondata$givenrating)
hist(predictiondata$`predicted rating`)
par(mfrow = c(1, 1))
predictiondata <- read.csv("predictions.txt", header = T, sep = ",")
names(predictiondata) <- c("movieid","userid","givenrating","predictedrating")
plot(predictiondata)
plot(predictiondata$givenrating,predictiondata$predictedrating)
summary(predictiondata)
par(mfrow = c(1, 2))
hist(predictiondata$givenrating)
hist(predictiondata$predictedrating)
par(mfrow = c(1, 1))
plot(predictiondata)
p
install.packages('reshape')
> library(reshape)
library(reshape)
library(reshape)
install.packages('reshape')
install.packages("reshape")
#Jaccard  Similarity
similarity_users <- similarity(MovieLense[1:4, ], method = "cosine", which = "users")
as.matrix(similarity_users)
image(as.matrix(similarity_users), main = "User similarity with cosine",col=gray(100:200/200))
#Cosine Similarity
similarity_users <- similarity(MovieLense[1:4, ], method = "jaccard", which = "users")
as.matrix(similarity_users)
image(as.matrix(similarity_users), main = "User similarity with Jaccard",col=gray(100:200/200))
#Pearson Similarity
similarity_users <- similarity(MovieLense[1:4, ], method = "pearson", which = "users")
as.matrix(similarity_users)
image(as.matrix(similarity_users), main = "User similarity with pearson",col=gray(100:200/200))
par(mfrow = c(1, 1))
par(mfrow = c(1, 3))
#Jaccard  Similarity
similarity_users <- similarity(MovieLense[1:4, ], method = "cosine", which = "users")
as.matrix(similarity_users)
image(as.matrix(similarity_users), main = "User similarity with cosine",col=gray(100:200/200))
#Cosine Similarity
similarity_users <- similarity(MovieLense[1:4, ], method = "jaccard", which = "users")
as.matrix(similarity_users)
image(as.matrix(similarity_users), main = "User similarity with Jaccard",col=gray(100:200/200))
#Pearson Similarity
similarity_users <- similarity(MovieLense[1:4, ], method = "pearson", which = "users")
as.matrix(similarity_users)
image(as.matrix(similarity_users), main = "User similarity with pearson",col=gray(100:200/200))
par(mfrow = c(1, 1))
predictiondata <- read.csv("predictions.txt", header = T, sep = ",")
names(predictiondata) <- c("movieid","userid","givenrating","predictedrating")
plot(predictiondata)
plot(predictiondata$givenrating,predictiondata$predictedrating)
summary(predictiondata)
par(mfrow = c(1, 2))
hist(predictiondata$givenrating)
hist(predictiondata$predictedrating)
par(mfrow = c(1, 1))
??linechart
par(mfrow = c(1, 2))
hist(predictiondata$givenrating)
hist(predictiondata$predictedrating)
par(mfrow = c(1, 1))
predictiondata <- read.csv("predictions.txt", header = T, sep = ",")
names(predictiondata) <- c("movieid","userid","givenrating","predictedrating")
plot(predictiondata)
plot(predictiondata$givenrating,predictiondata$predictedrating)
summary(predictiondata)
par(mfrow = c(1, 2))
hist(predictiondata$givenrating)
hist(predictiondata$predictedrating)
par(mfrow = c(1, 1))
??hist
histplot(predictiondata$givenratingcol="redblue")
histplot(predictiondata$givenratingcol="steelblue")
histplot(predictiondata$givenrating, col="steelblue")
??hist
predictiondata <- read.csv("predictions.txt", header = T, sep = ",")
names(predictiondata) <- c("movieid","userid","givenrating","predictedrating")
plot(predictiondata)
plot(predictiondata$givenrating,predictiondata$predictedrating)
summary(predictiondata)
par(mfrow = c(1, 2))
histpl(predictiondata$givenrating, col="steelblue")
hist(predictiondata$predictedrating)
par(mfrow = c(1, 1))
predictiondata <- read.csv("predictions.txt", header = T, sep = ",")
names(predictiondata) <- c("movieid","userid","givenrating","predictedrating")
plot(predictiondata)
plot(predictiondata$givenrating,predictiondata$predictedrating)
summary(predictiondata)
par(mfrow = c(1, 2))
hist(predictiondata$givenrating, col="steelblue")
hist(predictiondata$predictedrating)
par(mfrow = c(1, 1))
hist(predictiondata$givenrating, col=rgb(0.1,0.1,0.1,0.5),xlim=c(0,10), ylim=c(0,200), main=”Overlapping Histogram”)
hist(predictiondata$predictedrating, col=rgb(0.8,0.8,0.8,0.5), add=T)
hist(predictiondata$givenrating, col=rgb(0.1,0.1,0.1,0.5),xlim=c(0,10), ylim=c(0,200), main=”Overlapping Histogram”)
hist(predictiondata$predictedrating, col=rgb(0.8,0.8,0.8,0.5), add=T)
hist(predictiondata$givenrating, col=rgb(0.1,0.1,0.1,0.5),xlim=c(0,10), ylim=c(0,200), main=”Overlapping Histogram”)
hist(predictiondata$predictedrating, col=rgb(0.8,0.8,0.8,0.5), add=T)
par(mfrow = c(1, 1))
hist(predictiondata$givenrating, col=rgb(0.1,0.1,0.1,0.5),xlim=c(0,10), ylim=c(0,200), main=”Overlapping Histogram”)
hist(predictiondata$predictedrating, col=rgb(0.8,0.8,0.8,0.5), add=T)
par(mfrow = c(1, 3))
#Jaccard  Similarity
similarity_users <- similarity(MovieLense[1:4, ], method = "cosine", which = "users")
as.matrix(similarity_users)
image(as.matrix(similarity_users), main = "User similarity with cosine",col=gray(100:200/200))
#Cosine Similarity
similarity_users <- similarity(MovieLense[1:4, ], method = "jaccard", which = "users")
as.matrix(similarity_users)
image(as.matrix(similarity_users), main = "User similarity with Jaccard",col=gray(100:200/200))
#Pearson Similarity
similarity_users <- similarity(MovieLense[1:4, ], method = "pearson", which = "users")
as.matrix(similarity_users)
image(as.matrix(similarity_users), main = "User similarity with pearson",col=gray(100:200/200))
par(mfrow = c(1, 1))
hist(predictiondata$givenrating, col=rgb(0.1,0.1,0.1,0.5),xlim=c(0,10), ylim=c(0,200), main=”Overlapping Histogram”)
hist(predictiondata$predictedrating, col=rgb(0.8,0.8,0.8,0.5), add=T)
hist(predictiondata$givenrating, col=rgb(0.1,0.1,0.1,0.5),xlim=c(0,10), ylim=c(0,200), main=”Overlapping Histogram”)
hist(predictiondata$predictedrating, col=rgb(0.8,0.8,0.8,0.5), add=T)
par(mfrow = c(1, 1))
hist(predictiondata$givenrating, col=rgb(0.1,0.1,0.1,0.5),xlim=c(0,10), ylim=c(0,200), main=”Overlapping Histogram”)
hist(predictiondata$predictedrating, col=rgb(0.8,0.8,0.8,0.5), add=T)
hist(predictiondata$givenrating, col=rgb(0.1,0.1,0.1,0.5),xlim=c(0,10), ylim=c(0,200), main=”Overlapping Histogram”)
hist(predictiondata$predictedrating, col=rgb(0.8,0.8,0.8,0.5), add=T)
hist(h1, col=rgb(0.1,0.1,0.1,0.5),xlim=c(0,10), ylim=c(0,200), main=”Overlapping Histogram”)
hist(h2, col=rgb(0.8,0.8,0.8,0.5), add=T)
par(mfrow = c(1, 1))
hist(h1, col=rgb(0.1,0.1,0.1,0.5),xlim=c(0,10), ylim=c(0,200), main=”Overlapping Histogram”)
hist(h2, col=rgb(0.8,0.8,0.8,0.5), add=T)
hist(h1, col=rgb(0.1,0.1,0.1,0.5),xlim=c(0,10), ylim=c(0,200), main=”Overlapping Histogram”)
hist(h2, col=rgb(0.8,0.8,0.8,0.5), add=T)
hist(predictiondata$givenrating, col=rgb(0.1,0.1,0.1,0.5),xlim=c(0,10), ylim=c(0,200), main=”Overlapping Histogram”)
hist(predictiondata$predictedrating, col=rgb(0.8,0.8,0.8,0.5), add=T)
hist(predictiondata$givenrating, col=rgb(0.1,0.1,0.1,0.5),xlim=c(0,10), ylim=c(0,200), main=”Overlapping Histogram”)
hist(predictiondata$predictedrating, col=rgb(0.8,0.8,0.8,0.5), add=T)
box()
par(mfrow = c(1, 3))
#Jaccard  Similarity
similarity_users <- similarity(MovieLense[1:4, ], method = "cosine", which = "users")
as.matrix(similarity_users)
image(as.matrix(similarity_users), main = "User similarity with cosine",col=gray(100:200/200))
#Cosine Similarity
similarity_users <- similarity(MovieLense[1:4, ], method = "jaccard", which = "users")
as.matrix(similarity_users)
image(as.matrix(similarity_users), main = "User similarity with Jaccard",col=gray(100:200/200))
#Pearson Similarity
similarity_users <- similarity(MovieLense[1:4, ], method = "pearson", which = "users")
as.matrix(similarity_users)
image(as.matrix(similarity_users), main = "User similarity with pearson",col=gray(100:200/200))
par(mfrow = c(1, 1))
par(mfrow = c(1, 1))
hist(predictiondata$givenrating, col=rgb(0.1,0.1,0.1,0.5),xlim=c(0,10), ylim=c(0,200), main=”Overlapping Histogram”)
hist(predictiondata$predictedrating, col=rgb(0.8,0.8,0.8,0.5), add=T)
box()
par(mfrow = c(1, 1))
hist(predictiondata$givenrating, col=rgb(0.1,0.1,0.1,0.5),xlim=c(0,10), ylim=c(0,200), main=”Overlapping Histogram”)
hist(predictiondata$predictedrating, col=rgb(0.8,0.8,0.8,0.5), add=T)
box()
hist(predictiondata$givenrating, col=rgb(0.1,0.1,0.1,0.5),xlim=c(0,10), ylim=c(0,200), main=”Overlapping Histogram”)
hist(predictiondata$predictedrating, col=rgb(0.8,0.8,0.8,0.5), add=T)
hist(predictiondata$givenrating, col=rgb(0.1,0.1,0.1,0.5),xlim=c(0,10), ylim=c(0,200), main=”Overlapping Histogram”)
plot(predictiondata$givenrating,predictiondata$predictedrating)
scatterplot(predictiondata$givenrating,predictiondata$predictedrating)
scatterplot(predictiondata$givenrating,predictiondata$predictedrating)
plot(predictiondata$givenrating,predictiondata$predictedrating)
plot(predictiondata$givenrating,predictiondata$predictedrating)
plot(predictiondata$givenrating-predictiondata$predictedrating,predictiondata$predictedrating)
plot(predictiondata$predictedrating,predictiondata$givenrating-predictiondata$predictedrating)
plot(abs(predictiondata$predictedrating),predictiondata$givenrating-predictiondata$predictedrating)
plot(abs(predictiondata$predictedrating),abs(predictiondata$givenrating-predictiondata$predictedrating))
par(mfrow = c(1, 1))
hist(predictiondata$givenrating, col=rgb(0.1,0.1,0.1,0.5),xlim=c(0,10), ylim=c(0,200), main=”Overlapping Histogram”)
hist(predictiondata$predictedrating, col=rgb(0.8,0.8,0.8,0.5), add=T)
par(mfrow = c(1, 1))
hist(predictiondata$givenrating, col=rgb(0.1,0.1,0.1,0.5),xlim=c(0,10), ylim=c(0,200), main=”Overlapping Histogram”)
hist(predictiondata$predictedrating, col=rgb(0.8,0.8,0.8,0.5), add=T)
hist(predictiondata$givenrating, col=rgb(0.1,0.1,0.1,0.5),xlim=c(0,10), ylim=c(0,200), main=”Overlapping Histogram”)
hist(predictiondata$predictedrating, col=rgb(0.8,0.8,0.8,0.5), add=T)
box()
h1<-predictiondata$givenrating
h2<-predictiondata$predictedrating
hist(h1, col=rgb(1,0,0,0.5),xlim=c(0,10), ylim=c(0,200), main=”Overlapping Histogram”, xlab=”Variable”)
hist(h2, col=rgb(0,0,1,0.5), add=T)
box()
box()
plot()
hist(h1, col=rgb(1,0,0,0.5),xlim=c(0,10), ylim=c(0,200), main=”Overlapping Histogram”, xlab=”Variable”)
hist(h2, col=rgb(0,0,1,0.5), add=T)
box()
plot()
par(mfrow = c(1, 1))
plot(abs(predictiondata$predictedrating),abs(predictiondata$givenrating-predictiondata$predictedrating))
hist(h1, col=rgb(1,0,0,0.5),xlim=c(0,10), ylim=c(0,200), main=”Overlapping Histogram”, xlab=”Variable”)
hist(h2, col=rgb(0,0,1,0.5), add=T)
box()
hist(h1, col=rgb(0.1,0.1,0.1,0.5),xlim=c(0,10), ylim=c(0,200), main="Overlapping Histogram")
hist(h2, col=rgb(0.8,0.8,0.8,0.5), add=T)
box()
hist(h1, col=rgb(0.1,0.1,0.1,0.5),xlim=c(0,5), ylim=c(0,1000), main="Overlapping Histogram")
hist(h2, col=rgb(0.8,0.8,0.8,0.5), add=T)
box()
hist(h1, col=rgb(0.1,0.1,0.1,0.5),xlim=c(0,5), ylim=c(0,10000), main="Overlapping Histogram")
hist(h2, col=rgb(0.8,0.8,0.8,0.5), add=T)
box()
hist(h1, col=rgb(0.1,0.1,0.1,0.5),xlim=c(0,5), ylim=c(0,2000), main="Overlapping Histogram")
hist(h2, col=rgb(0.8,0.8,0.8,0.5), add=T)
box()
hist(h1, col=rgb(0.1,0.1,0.1,0.5),xlim=c(0,5), ylim=c(0,1500), main="Overlapping Histogram")
hist(h2, col=rgb(0.8,0.8,0.8,0.5), add=T)
hist(h1, col=rgb(0.1,0.1,0.1,0.5),xlim=c(0,5), ylim=c(0,1200), main="Overlapping Histogram")
hist(h2, col=rgb(0.8,0.8,0.8,0.5), add=T)
box()
hist(h1, col=rgb(0.2,0.2,0.8,0.5),xlim=c(0,5), ylim=c(0,1200), main="Overlapping Histogram")
hist(h2, col=rgb(0.8,0.8,0.8,0.5), add=T)
hist(h1, col=rgb(1.0,0.1,0.1,0.9),xlim=c(0,5), ylim=c(0,1200), main="Overlapping Histogram")
hist(h2, col=rgb(1.0,0.8,0.8,0.5), add=T)
box()
hist(h1, col=rgb(0.0,0.1,0.9,0.9),xlim=c(0,5), ylim=c(0,1200), main="Overlapping Histogram")
hist(h2, col=rgb(1.0,0.8,0.8,0.5), add=T)
box()
hist(h1, col=rgb(0.0,0.1,0.9,0.9),xlim=c(0,5), ylim=c(0,1200), main="Overlapping Histogram")
hist(h2, col=rgb(1.0,0.8,0.8,1.0), add=T)
box()
hist(h1, col=rgb(0.0,0.1,0.9,1.0),xlim=c(0,5), ylim=c(0,1200), main="Overlapping Histogram")
hist(h2, col=rgb(1.0,0.8,0.8,0.9), add=T)
box()
hist(h1, col=rgb(0.0,0.1,0.9,1.0),xlim=c(1,5), ylim=c(0,1200), main="Overlapping Histogram")
hist(h2, col=rgb(1.0,0.1,0.1,1.0), add=T)
box()
hist(h1, col=rgb(0.0,0.1,0.9,1.0),xlim=c(1,5), ylim=c(0,1200), main="Overlapping Histogram")
hist(h2, col=rgb(1.0,0.1,0.1,0.5), add=T)
box()
hist(h1, col=rgb(0.0,0.1,0.9,1.0),xlim=c(1,5), ylim=c(0,1200), main="Overlapping Histogram")
hist(h2, col=rgb(1.0,0.1,0.1,0.8), add=T)
box()
hist(h1, col=rgb(0.0,0.1,0.9,1.0),xlim=c(1,5), ylim=c(0,1200), main="Overlapping Histogram",xlab = "Movie Rating", ylab = "Predicted values")
hist(h2, col=rgb(1.0,0.1,0.1,0.8), add=T)
box()
hist(predictiondata$givenrating)
hist(predictiondata$givenrating)
hist(predictiondata$predictedrating)
??barplot
install.packages('reshape')
library(reshape)
cast(predictiondata, predictedrating ~ movieid)
cast(predictiondata$givenrating, predictedrating ~ movieid)
cast(predictiondata$givenrating, predictiondata$predictedrating ~ movieid)
cast(predictiondata, userid ~ movieid)
cast(predictiondata, userid ~ movieid)
cast(mean(predictiondata), userid ~ movieid)
cast(mean(predictiondata$givenrating), userid ~ movieid)
cast(mean(predictiondata$givenrating), userid ~ movieid)
cast(mean(predictiondata$givenrating), userid ~ movieid)
setwd("C:/Users/Akhilesh/Desktop/Akhilesh Graduate studies/Sem 2/ML/ML assignments/MLProject_CollabFilter")
cosine <- read.table("predictions_cosine.txt")
pearson <- read.table("predictions_pearson.txt")
cosine
View(cosine)
cosine <- read.table("predictions_cosine.txt",header = T, sep = ",")
pearson <- read.table("predictions_pearson.txt",header = T, sep = ",")
cosine
pearson
cosine <- read.table("predictions_cosine.txt",header = T, sep = ",")
pearson <- read.table("predictions_pearson.txt",header = T, sep = ",")
cosine <- read.table("predictions_cosine.txt",header = T, sep = ",")
pearson <- read.table("predictions_pearson.txt",header = T, sep = ",")
names(cosine) <- c("movieid","userid","givenrating","predictedrating")
names(pearson) <- c("movieid","userid","givenrating","predictedrating")
summary(cosine)
summary(pearson)
plot(cosine)
plot(cosine$givenrating,cosine$predictedrating)
plot(cosine$givenrating,cosine$predictedrating)
plot(pearson$givenrating,pearson$predictedrating)
par(mfrow = c(1, 2))
plot(cosine$givenrating,cosine$predictedrating)
plot(pearson$givenrating,pearson$predictedrating)
par(mfrow = c(1, 1))
par(mfrow = c(1, 2))
hist(cosine$predictedrating)
hist(pearson$givenrating,pearson$predictedrating)
par(mfrow = c(1, 1))
hist(pearson$predictedrating)
par(mfrow = c(1, 2))
hist(cosine$predictedrating)
hist(pearson$predictedrating)
par(mfrow = c(1, 1))
par(mfrow = c(1, 3))
hist(cosine$predictedrating)
hist(pearson$predictedrating)
hist(cosine$givenrating)
par(mfrow = c(1, 1))
par(mfrow = c(1, 3))
#Jaccard  Similarity
similarity_users <- similarity(MovieLense[1:4, ], method = "cosine", which = "users")
as.matrix(similarity_users)
image(as.matrix(similarity_users), main = "User similarity with cosine",col=gray(100:200/200))
#Cosine Similarity
similarity_users <- similarity(MovieLense[1:4, ], method = "jaccard", which = "users")
as.matrix(similarity_users)
image(as.matrix(similarity_users), main = "User similarity with Jaccard",col=gray(100:200/200))
#Pearson Similarity
similarity_users <- similarity(MovieLense[1:4, ], method = "pearson", which = "users")
as.matrix(similarity_users)
image(as.matrix(similarity_users), main = "User similarity with pearson",col=gray(100:200/200))
par(mfrow = c(1, 1))
cosine <- read.table("predictions_cosine.txt",header = T, sep = ",")
pearson <- read.table("predictions_pearson.txt",header = T, sep = ",")
names(cosine) <- c("movieid","userid","givenrating","predictedrating")
names(pearson) <- c("movieid","userid","givenrating","predictedrating")
summary(cosine)
summary(pearson)
par(mfrow = c(1, 2))
plot(cosine$givenrating,cosine$predictedrating)
plot(pearson$givenrating,pearson$predictedrating)
par(mfrow = c(1, 1))
par(mfrow = c(1, 3))
hist(cosine$predictedrating)
hist(pearson$predictedrating)
hist(cosine$givenrating)
par(mfrow = c(1, 1))
plot(cosine$givenrating,cosine$predictedrating)
plot(pearson$givenrating,pearson$predictedrating)
par(mfrow = c(1, 1))
par(mfrow = c(1, 3))
hist(pearson$predictedrating)
hist(cosine$givenrating)
par(mfrow = c(1, 1))
hist(cosine$predictedrating)
par(mfrow = c(1, 3))
hist(pearson$predictedrating)
hist(cosine$givenrating)
par(mfrow = c(1, 1))
par(mfrow = c(1, 3))
hist(pearson$predictedrating)
hist(cosine$givenrating)
hist(cosine$predictedrating)
par(mfrow = c(1, 1))
par(mfrow = c(1, 3))
hist(pearson$predictedrating,xlab = "Pearson Predicted Rating")
hist(cosine$givenrating, xval = "given Rating", )
hist(cosine$predictedrating, xval = "Predicted Rating", yval =)
par(mfrow = c(1, 1))
par(mfrow = c(1, 3))
hist(pearson$predictedrating,xlab = "Pearson Predicted Rating")
hist(cosine$givenrating, xval = "given Rating", )
hist(cosine$predictedrating, xval = " cosine Predicted Rating", yval =)
par(mfrow = c(1, 1))
par(mfrow = c(1, 3))
hist(pearson$predictedrating,xlab = "Pearson Predicted Rating")
hist(cosine$givenrating, xval = "given Rating", )
hist(cosine$predictedrating, xval = " cosine Predicted Rating")
par(mfrow = c(1, 1))
par(mfrow = c(1, 3))
hist(pearson$predictedrating,xlab = "Pearson Predicted Rating",labels = "Pearson")
hist(cosine$givenrating, xval = "given Rating",labels = "Cosine" )
hist(cosine$predictedrating, xval = " cosine Predicted Rating", labels = "Predict")
par(mfrow = c(1, 1))
hist(pearson$predictedrating,xlab = "Pearson Predicted Rating",title = "Pearson")
par(mfrow = c(1, 3))
hist(pearson$predictedrating,xlab = "Pearson Predicted Rating")
hist(cosine$givenrating, xval = "given Rating" )
hist(cosine$predictedrating, xval = " cosine Predicted Rating")
par(mfrow = c(1, 1))
par(mfrow = c(1, 3))
hist(pearson$predictedrating,xlab = "Pearson Predicted Rating")
hist(cosine$givenrating, xlab = "Given Rating" )
hist(cosine$predictedrating, xlab = " cosine Predicted Rating")
par(mfrow = c(1, 1))
par(mfrow = c(1, 3))
hist(pearson$predictedrating,xlab = "Pearson Predicted Rating")
hist(cosine$givenrating, xlab = "Given Rating" )
hist(cosine$predictedrating, xlab = " cosine Predicted Rating")
par(mfrow = c(1, 1))
